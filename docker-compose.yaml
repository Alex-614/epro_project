version: "3.8"



services:

  # OKR Database - Postgres
  okr-db:
    container_name: okr-db
    hostname: okr-db
    networks:
      - backnet
    image: postgres:16.1
    restart: on-failure
    volumes:
      - okr-db:/var/lib/postgresql/data
      - ./init/OKR-DB/00-init.sql:/docker-entrypoint-initdb.d/00-init.sql:ro
      - ./init/OKR-DB/01-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: okr-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

  # OKR Service
  okr-service:
    container_name: okr-service
    hostname: okr-service
    networks:
      - backnet
    build:
      context: ./okrservice
      dockerfile: Dockerfile
    image: epro_project-okr-service
    restart: on-failure
    depends_on:
      okr-db:
        condition: service_healthy

  # Angular Frontend
  angular-application:
    container_name: angular-application
    hostname: angular-application
    networks:
      - frontnet
    build:
      context: ./angularapp
      dockerfile: Dockerfile
    image: angular-application
    restart: on-failure


  # API Gateway
  okr-gateway:
    container_name: okr-gateway
    hostname: okr-gateway
    networks:
      - backnet
      - frontnet
    build:
      context: ./okrgateway
      dockerfile: Dockerfile
    image: epro_project-okr-gateway
    ports:
      - "8080:8080"
    restart: on-failure
    depends_on:
      okr-service:
        condition: service_started

volumes:
  okr-db:

networks:
  backnet:
  frontnet:





